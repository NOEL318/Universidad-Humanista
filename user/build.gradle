plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.bmuschko.docker-remote-api' version '9.4.0'
}

group = 'com.intranet'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
	mavenCentral()
}
ext {
  set('springCloudVersion', "2025.0.0")
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
  implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

	//Logging
  implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
  implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
  implementation 'org.mapstruct:mapstruct:1.6.3'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
 runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'
	runtimeOnly 'io.micrometer:micrometer-registry-graphite'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	//Eureka Client
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

}
dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

tasks.named('test') {
	useJUnitPlatform()
}

// Docker tasks
import com.bmuschko.gradle.docker.tasks.image.*

task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
    dependsOn build
    from 'openjdk:17-jdk-alpine'
    copyFile "build/libs/${project.name}-${project.version}.jar", 'app.jar'
    entryPoint 'java', '-jar', '/app.jar'
}


task buildDockerImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    images = ["${project.group}/${project.name}:${project.version}", "${project.group}/${project.name}:latest"]
}

task pushDockerImage(type: DockerPushImage) {
    dependsOn buildDockerImage
    images = ["${project.group}/${project.name}:${project.version}", "${project.group}/${project.name}:latest"]
}
